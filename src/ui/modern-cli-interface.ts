import { EventEmitter } from 'events';
import * as readline from 'readline';
import chalk from 'chalk';
import ora from 'ora';
import * as figlet from 'figlet';
import gradient from 'gradient-string';
import { config } from '../config';
import { AIService } from '../services/ai';
import { ChatMessage } from '../types';
import { InteractionEngine, InteractionOptions, CommandContext, InteractionEvent } from '../core/interaction-engine';
import { OutputProcessor, OutputOptions, FormattedOutput } from '../core/output-processor';
import { ToolIntegration, ToolExecutionOptions } from '../core/tool-integration';
import { MultilineInputProcessor, MultilineInputOptions } from '../core/multiline-input';
import { ScreenshotPasteHandler, ScreenshotPasteOptions } from '../core/screenshot-paste-handler';
import { AttachmentManager, ManagedAttachment } from '../core/attachment-manager';
import { DragDropHandler } from '../core/drag-drop-handler';
import { EnhancedDragHandler } from '../core/enhanced-drag-handler';
import { InputEnhancer, InputEnhancerOptions } from '../core/input-enhancer';
import { DragIndicator, createDragIndicator } from '../core/drag-indicator';
import { TerminalDragDetector, TerminalDragEvent } from '../core/terminal-drag-detector';
import { DragDisplay } from '../core/drag-display';
import { RealDragDetector, RealDragEvent } from '../core/real-drag-detector';
import { EnhancedAIService, EnhancedAIRequest } from '../services/enhanced-ai-service';

export interface ModernCLIOptions {
  theme?: 'claude' | 'qorder' | 'auto';
  showSidebar?: boolean;
  showStatusBar?: boolean;
  enableAnimations?: boolean;
  enableScreenshotPaste?: boolean;
}

export interface SessionInfo {
  id: string;
  title?: string;
  model: string;
  provider: string;
  messages: number;
  tokens?: number;
  startTime: Date;
}

export interface ToolStatus {
  name: string;
  category: string;
  status: 'ready' | 'running' | 'error' | 'disabled';
  description?: string;
}

export class ModernCLIInterface extends EventEmitter {
  private rl: readline.Interface;
  private options: ModernCLIOptions;
  private currentSession: SessionInfo | null = null;
  private toolStatuses: Map<string, ToolStatus> = new Map();
  private isRunning = false;
  private spinner: any | null = null;
  public messageHistory: Array<{ type: 'user' | 'ai'; content: string; timestamp: Date }> = [];
  private aiService: AIService | null = null;

  // Ê∏≤ÊüìÈò≤ÊäñÊú∫Âà∂
  private renderTimeout: NodeJS.Timeout | null = null;
  private lastRenderTime: number = 0;

  // Êñ∞ÁöÑ‰∫ã‰ª∂È©±Âä®Êû∂ÊûÑÁªÑ‰ª∂
  private interactionEngine!: InteractionEngine;
  private outputProcessor!: OutputProcessor;
  private toolIntegration!: ToolIntegration;
  private multilineInput!: MultilineInputProcessor;
  private screenshotPasteHandler!: ScreenshotPasteHandler;
  private attachmentManager!: AttachmentManager;
  private dragDropHandler!: DragDropHandler;
  private enhancedDragHandler!: EnhancedDragHandler;
  private inputEnhancer!: InputEnhancer;
  private dragIndicator!: DragIndicator;
  private terminalDragDetector!: TerminalDragDetector;
  private dragDisplay!: DragDisplay;
  private realDragDetector!: RealDragDetector;
  private pendingInputs: string[] = [];
  private isProcessing = false;
  private currentAttachments: ManagedAttachment[] = [];

  constructor(options: ModernCLIOptions = {}) {
    super();

    this.options = {
      theme: options.theme || 'auto',
      showSidebar: options.showSidebar !== false,
      showStatusBar: options.showStatusBar !== false,
      enableAnimations: options.enableAnimations !== false,
      enableScreenshotPaste: options.enableScreenshotPaste !== false,
      ...options
    };

    // ÂàùÂßãÂåñÊñ∞ÁöÑ‰∫ã‰ª∂È©±Âä®Êû∂ÊûÑÁªÑ‰ª∂
    this.interactionEngine = new InteractionEngine({
      enableHistory: true,
      maxHistorySize: 1000,
      enableAutoComplete: true,
      enableKeyBindings: true,
      theme: 'dark'
    });

    this.outputProcessor = new OutputProcessor({
      enableColors: true,
      enableMarkdown: true,
      enableStreaming: true,
      streamDelay: 10,
      maxLineWidth: process.stdout.columns || 80
    });

    this.toolIntegration = new ToolIntegration();

    // ÂàùÂßãÂåñÊà™ÂõæÁ≤òË¥¥Â§ÑÁêÜÂô®
    if (this.options.enableScreenshotPaste) {
      this.screenshotPasteHandler = new ScreenshotPasteHandler({
        enableCtrlV: true,
        enableAutoDetect: false, // ÊöÇÊó∂ÂÖ≥Èó≠Ëá™Âä®Ê£ÄÊµãÈÅøÂÖçÊÄßËÉΩÈóÆÈ¢ò
        maxFileSize: 10 // MB
      });
    }

    // ÂàùÂßãÂåñÈôÑ‰ª∂ÁÆ°ÁêÜÂô®
    this.attachmentManager = new AttachmentManager({
      maxAttachments: 10,
      maxTotalSize: 50 * 1024 * 1024, // 50MB
      autoCleanup: true
    });

    // ÂàùÂßãÂåñÊãñÊãΩÂ§ÑÁêÜÂô®
    this.dragDropHandler = new DragDropHandler(this.attachmentManager, {
      enabled: true,
      showHints: true,
      maxFiles: 5,
      maxFileSize: 10 * 1024 * 1024 // 10MB
    });

    this.multilineInput = new MultilineInputProcessor({
      enableFileDrop: true,
      maxLines: 1000,
      indentSize: 2,
      enableSyntaxHighlight: true,
      editorPrompt: 'üìù Â§öË°åÁºñËæëÂô®'
    });

    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
      completer: this.completer.bind(this)
    });

    // ÂàùÂßãÂåñÂ¢ûÂº∫ÊãñÊãΩÂ§ÑÁêÜÂô®
    this.enhancedDragHandler = new EnhancedDragHandler(this.attachmentManager, {
      enableRealTimeFeedback: true,
      enableFilePreview: true,
      enableHoverEffects: true,
      showProgressIndicators: true
    });

    // ÂàùÂßãÂåñËæìÂÖ•Â¢ûÂº∫Âô®
    this.inputEnhancer = new InputEnhancer(this.rl, this.attachmentManager, {
      enableDragDrop: true,
      enableVisualFeedback: true,
      enableInlinePreview: true,
      dragPrompt: 'üéØ ÊãñÊãΩÊñá‰ª∂Âà∞ËøôÈáå > ',
      normalPrompt: '> ',
      showAttachmentIndicator: true
    });

    // ÂàùÂßãÂåñÊãñÊãΩÊåáÁ§∫Âô®
    this.dragIndicator = createDragIndicator('full');

    // ÂàùÂßãÂåñÊñ∞ÁöÑÁªàÁ´ØÊãñÊãΩÊ£ÄÊµãÂô®
    this.terminalDragDetector = new TerminalDragDetector(this.attachmentManager, {
      enableFileWatcher: true,
      enableTempDirectory: true,
      detectionWindow: 3000,
      maxFileSize: 50 * 1024 * 1024, // 50MB
      maxFiles: 10,
      showProgress: true,
      enablePreview: true
    });

    // ÂàùÂßãÂåñÊãñÊãΩÊòæÁ§∫ÁªÑ‰ª∂
    this.dragDisplay = new DragDisplay({
      showFileIcons: true,
      showFileSize: true,
      showFileType: true,
      showProgress: true,
      maxPreviewLength: 45,
      colorScheme: 'blue',
      compact: false
    });

    // ÂàùÂßãÂåñÁúüÊ≠£ÁöÑÊãñÊãΩÊ£ÄÊµãÂô®
    this.realDragDetector = new RealDragDetector(this.attachmentManager, {
      enableAnsiDetection: true,
      enableFileSystemFallback: true,
      enableTerminalSpecific: true,
      watchDirectories: this.getDefaultWatchDirectories(),
      detectionTimeout: 5000,
      maxFileSize: 50 * 1024 * 1024, // 50MB
      maxFiles: 10,
      showVisualFeedback: true
    });

    this.initializeAIService();
    this.setupEventHandlers();
    this.setupInteractionEngine();
    this.setupMultilineInput();
    this.setupDragDropHandlers();
    this.setupEnhancedDragHandlers();
    this.setupTerminalDragDetector();
    this.setupRealDragDetector();
  }

  private initializeAIService(): void {
    try {
      const currentProvider = config.getCurrentProvider();
      if (currentProvider) {
        const apiKey = process.env[currentProvider.apiKeyEnvVar];
        if (apiKey) {
          this.aiService = new AIService(currentProvider, apiKey);
        }
      }
    } catch (error) {
      // ‰ΩøÁî®process.stderr.writeÈÅøÂÖçÂπ≤Êâ∞readline
      process.stderr.write('AIÊúçÂä°ÂàùÂßãÂåñÂ§±Ë¥•: ' + (error instanceof Error ? error.message : error) + '\n');
    }
  }

  private setupEventHandlers(): void {
    // ÈÄÄÂá∫Â§ÑÁêÜÂáΩÊï∞ - Á°Æ‰øùÊÄªÊòØÂèØÁî®
    const handleExit = () => {
      try {
        // ÂÅúÊ≠¢‰∫§‰∫íÂºïÊìé
        this.interactionEngine.stop();

        // Ê∏ÖÁêÜreadline
        if (this.rl) {
          this.rl.close();
        }

        // ÊòæÁ§∫ÂëäÂà´Ê∂àÊÅØ
        process.stdout.write('\n' + chalk.yellow('üëã ÂÜçËßÅÔºÅ') + '\n');
      } catch (e) {
        // ÂøΩÁï•ÊâÄÊúâÈîôËØØ
      } finally {
        process.exit(0);
      }
    };

    // Â§ÑÁêÜCtrl+C (SIGINT) - Â§öÂ±Ç‰øùÊä§
    // 1. readlineÂ±ÇÈù¢
    this.rl.on('SIGINT', handleExit);

    // 2. ËøõÁ®ãÂ±ÇÈù¢ - ‰ΩøÁî®onceÈÅøÂÖçÈáçÂ§çËß¶Âèë
    process.once('SIGINT', handleExit);

    // 3. Â§áÁî®Â§ÑÁêÜ - ÁõëÂê¨ÊâÄÊúâÂèØËÉΩÁöÑ‰ø°Âè∑
    process.once('SIGTERM', handleExit);

    // Â§ÑÁêÜÁ™óÂè£Â§ßÂ∞èÂèòÂåñ
    process.stdout.on('resize', () => {
      if (this.isRunning) {
        this.render();
      }
    });

    // Â§ÑÁêÜËøõÁ®ãÂºÇÂ∏∏ÈÄÄÂá∫
    process.on('uncaughtException', (error) => {
      console.error('\n‚ùå Êú™ÊçïËé∑ÁöÑÂºÇÂ∏∏:', error);
      handleExit();
    });

    process.on('unhandledRejection', (reason, promise) => {
      console.error('\n‚ùå Êú™Â§ÑÁêÜÁöÑPromiseÊãíÁªù:', reason);
      handleExit();
    });
  }

  private setupInteractionEngine(): void {
    // ÁõëÂê¨‰∫§‰∫íÂºïÊìéÁöÑ‰∫ã‰ª∂
    this.interactionEngine.on('interaction', (event: InteractionEvent) => {
      this.handleInteractionEvent(event);
    });

    this.interactionEngine.on('error', (error: any) => {
      this.showError(`‰∫§‰∫íÂºïÊìéÈîôËØØ: ${error.error?.message || 'Êú™Áü•ÈîôËØØ'}`);
    });

    // ÁõëÂê¨Êú™Áü•ÂëΩ‰ª§‰∫ã‰ª∂
    this.interactionEngine.on('unknown_command', (data: any) => {
      const { command, args, context } = data;
      this.showError(`Êú™Áü•ÂëΩ‰ª§: /${command}`);
    });

    // ÁõëÂê¨Â∑•ÂÖ∑ÊâßË°å‰∫ã‰ª∂
    this.toolIntegration.on('tool_execution_started', (record) => {
      this.showInfo(`ÂºÄÂßãÊâßË°åÂ∑•ÂÖ∑: ${record.toolName}`, true);
    });

    this.toolIntegration.on('tool_execution_completed', (record) => {
      this.showSuccess(`Â∑•ÂÖ∑ÊâßË°åÂÆåÊàê: ${record.toolName} (${record.result?.executionTime}ms)`, true);
    });

    this.toolIntegration.on('tool_execution_failed', (record) => {
      this.showError(`Â∑•ÂÖ∑ÊâßË°åÂ§±Ë¥•: ${record.toolName} - ${record.result?.error}`, true);
    });
  }

  private setupMultilineInput(): void {
    // ÁõëÂê¨Â§öË°åËæìÂÖ•ÂÆåÊàê‰∫ã‰ª∂
    this.multilineInput.on('inputComplete', async (content: string) => {
      if (content.trim()) {
        await this.processUserInput(content);
      }
    });

    // ÁõëÂê¨Â§öË°åËæìÂÖ•ÂèñÊ∂à‰∫ã‰ª∂
    this.multilineInput.on('inputCancelled', () => {
      this.render(); // ÈáçÊñ∞Ê∏≤ÊüìÁïåÈù¢
    });

    // ÁõëÂê¨Êñá‰ª∂ÊãñÊãΩ‰∫ã‰ª∂
    this.multilineInput.on('fileDrop', (fileDrop: any) => {
      this.showInfo(`üìÅ Â∑≤Âä†ËΩΩÊñá‰ª∂: ${fileDrop.filePath} (${this.formatFileSize(fileDrop.size)})`);
    });
  }

  private handleInteractionEvent(event: InteractionEvent): void {
    switch (event.type) {
      case 'input':
        this.handleInputEvent(event.data as CommandContext);
        break;
      case 'command':
        this.handleCommandEvent(event.data);
        break;
      case 'response':
        this.handleResponseEvent(event.data);
        break;
      case 'error':
        this.handleErrorEvent(event.data);
        break;
      case 'exit':
        this.handleExitEvent(event.data);
        break;
    }
  }

  private handleInputEvent(context: CommandContext): void {
    this.messageHistory.push({
      type: 'user',
      content: context.input,
      timestamp: context.timestamp
    });
  }

  private handleCommandEvent(data: any): void {
    const { command, args, context } = data;
    // ‰∏çÂÜçÊòæÁ§∫ÂÜó‰ΩôÁöÑÊâßË°åÂëΩ‰ª§‰ø°ÊÅØÔºåËÆ© InteractionEngine ÁöÑÂÖ∑‰ΩìÂëΩ‰ª§ÊòæÁ§∫Â§ÑÁêÜ
    // Âè™ÂØπÁâπÂÆöÂëΩ‰ª§ËÆ∞ÂΩïÂà∞ÂéÜÂè≤
    this.messageHistory.push({
      type: 'user',
      content: `/${command} ${args.join(' ')}`,
      timestamp: context.timestamp
    });
  }

  private handleResponseEvent(data: any): void {
    const { message, response, context } = data;
    this.messageHistory.push({
      type: 'ai',
      content: response.content,
      timestamp: new Date()
    });
  }

  private handleErrorEvent(data: any): void {
    const { input, error } = data;
    this.showError(`Â§ÑÁêÜËæìÂÖ•Êó∂Âá∫Èîô: ${error.message || error}`);
  }

  private handleExitEvent(data: any): void {
    const { reason } = data;
    this.showInfo(`ÈÄÄÂá∫ÂéüÂõ†: ${reason}`);
  }

  private completer(line: string): [string[], string] {
    const commands = ['/help', '/exit', '/clear', '/status', '/tools', '/config', '/sessions', '/paste', '/attachments', '/clear-attachments', '/remove-attachment', '/drag-files'];
    const matches = commands.filter(cmd => cmd.startsWith(line));
    return [matches.length ? matches : commands, line];
  }

  private getThemeColors() {
    const themes = {
      claude: {
        primary: '#6741d9',
        secondary: '#8b5cf6',
        accent: '#a78bfa',
        background: '#1a1a1a',
        text: '#e5e5e5',
        success: '#10b981',
        warning: '#f59e0b',
        error: '#ef4444'
      },
      qorder: {
        primary: '#3b82f6',
        secondary: '#60a5fa',
        accent: '#93c5fd',
        background: '#0f0f0f',
        text: '#f3f4f6',
        success: '#22c55e',
        warning: '#fbbf24',
        error: '#f87171'
      },
      auto: {
        primary: '#8b5cf6',
        secondary: '#a78bfa',
        accent: '#c4b5fd',
        background: '#111111',
        text: '#e5e5e5',
        success: '#10b981',
        warning: '#f59e0b',
        error: '#ef4444'
      }
    };

    return themes[this.options.theme || 'auto'];
  }

  private createGradient(text: string): string {
    const colors = this.getThemeColors();
    return gradient([
      colors.primary,
      colors.secondary
    ])(text);
  }

  private renderHeader(): string {
    try {
      const banner = figlet.textSync('AICLI', {
        font: 'Small',
        horizontalLayout: 'default',
        verticalLayout: 'default'
      });

      // Ê∑ªÂä†Èó™ÁÉÅÊïàÊûú
      const gradientBanner = this.createGradient(banner);
      const sparkle = this.options.enableAnimations ? '‚ú® ' : '';
      return sparkle + gradientBanner + '\n';
    } catch (error) {
      const fallback = this.createGradient('ü§ñ Â¢ûÂº∫Áâà AICLI');
      const sparkle = this.options.enableAnimations ? '‚ú® ' : '';
      return sparkle + fallback + '\n';
    }
  }

  private renderSidebar(): string {
    if (!this.options.showSidebar) return '';

    const colors = this.getThemeColors();
    const width = Math.min(35, Math.floor(process.stdout.columns * 0.35));

    let sidebar = '';

    // È°∂ÈÉ®Ë£ÖÈ•∞Á∫ø
    sidebar += chalk.cyan('‚îå' + '‚îÄ'.repeat(width - 2) + '‚îê') + '\n';

    // Ê†áÈ¢òÂå∫Âüü
    const title = 'ü§ñ AICLI';
    const padding = Math.floor((width - title.length - 4) / 2);
    sidebar += chalk.cyan('‚îÇ') + ' '.repeat(padding) + chalk.white.bold(title) + ' '.repeat(width - padding - title.length - 4) + chalk.cyan('‚îÇ') + '\n';

    // ÂàÜÂâ≤Á∫ø
    sidebar += chalk.cyan('‚îú' + '‚îÄ'.repeat(width - 2) + '‚î§') + '\n';

    // ‰ºöËØù‰ø°ÊÅØÂå∫Âüü
    if (this.currentSession) {
      sidebar += chalk.cyan('‚îÇ') + chalk.white.bold(' ‰ºöËØù‰ø°ÊÅØ') + ' '.repeat(width - 12) + chalk.cyan('‚îÇ') + '\n';
      sidebar += chalk.cyan('‚îú' + '‚îÄ'.repeat(width - 2) + '‚î§') + '\n';

      sidebar += chalk.cyan('‚îÇ üìù ') + chalk.gray((this.currentSession.title || 'Êú™ÂëΩÂêç‰ºöËØù').padEnd(width - 6)) + chalk.cyan('‚îÇ') + '\n';
      sidebar += chalk.cyan('‚îÇ ü§ñ ') + chalk.gray((`${this.currentSession.provider}/${this.currentSession.model}`).padEnd(width - 6)) + chalk.cyan('‚îÇ') + '\n';
      sidebar += chalk.cyan('‚îÇ üí¨ ') + chalk.gray((`${this.currentSession.messages} Êù°Ê∂àÊÅØ`).padEnd(width - 6)) + chalk.cyan('‚îÇ') + '\n';
      sidebar += chalk.cyan('‚îÇ ‚è±Ô∏è  ') + chalk.gray((this.formatDuration(this.currentSession.startTime)).padEnd(width - 6)) + chalk.cyan('‚îÇ') + '\n';
    }

    // Â∑•ÂÖ∑Áä∂ÊÄÅÂå∫Âüü
    const toolCategories = new Map<string, ToolStatus[]>();
    this.toolStatuses.forEach(tool => {
      if (!toolCategories.has(tool.category)) {
        toolCategories.set(tool.category, []);
      }
      toolCategories.get(tool.category)!.push(tool);
    });

    toolCategories.forEach((tools, category) => {
      sidebar += chalk.cyan('‚îú' + '‚îÄ'.repeat(width - 2) + '‚î§') + '\n';
      sidebar += chalk.cyan('‚îÇ') + chalk.white.bold(` ${category}`) + ' '.repeat(width - category.length - 4) + chalk.cyan('‚îÇ') + '\n';
      sidebar += chalk.cyan('‚îú' + '‚îÄ'.repeat(width - 2) + '‚î§') + '\n';

      tools.forEach(tool => {
        const statusIcon = this.getStatusIcon(tool.status);
        const statusColor = this.getStatusColor(tool.status);
        const toolName = tool.name.length > 15 ? tool.name.substring(0, 15) + '...' : tool.name;
        const padding = width - toolName.length - 10;

        let statusColorFunc;
        if (statusColor === 'green') {
          statusColorFunc = chalk.green;
        } else if (statusColor === 'red') {
          statusColorFunc = chalk.red;
        } else if (statusColor === 'yellow') {
          statusColorFunc = chalk.yellow;
        } else if (statusColor === 'blue') {
          statusColorFunc = chalk.blue;
        } else if (statusColor === 'gray') {
          statusColorFunc = chalk.gray;
        } else {
          statusColorFunc = chalk.white;
        }

        sidebar += chalk.cyan('‚îÇ') +
                   chalk.white(`  ${statusIcon} `) +
                   chalk.gray(toolName) +
                   ' '.repeat(padding) +
                   statusColorFunc(`[${tool.status}]`) +
                   chalk.cyan('‚îÇ') + '\n';
      });
    });

    // Â∫ïÈÉ®Ë£ÖÈ•∞Á∫ø
    sidebar += chalk.cyan('‚îî' + '‚îÄ'.repeat(width - 2) + '‚îò') + '\n';

    return sidebar + '\n';
  }

  private renderStatusBar(): string {
    if (!this.options.showStatusBar) return '';

    const width = process.stdout.columns;
    const separator = chalk.cyan('‚îÄ'.repeat(width));

    // Âä®ÊÄÅÁä∂ÊÄÅÊåáÁ§∫Âô®
    const statusIcon = this.options.enableAnimations ? 'üü¢' : 'üöÄ';
    const animatedDots = this.options.enableAnimations ? '...' : '';

    const leftSide = chalk.white(`${statusIcon} Â∞±Áª™${animatedDots}`) + ' ' + chalk.gray('Ctrl+C ÈÄÄÂá∫');

    // ÂΩìÂâçÊó∂Èó¥
    const currentTime = new Date().toLocaleTimeString('zh-CN', {
      hour12: false,
      hour: '2-digit',
      minute: '2-digit'
    });

    const centerSide = chalk.white('üìÖ ') + chalk.gray(currentTime);

    // Ê®°ÂºèÊåáÁ§∫Âô®
    const modeIcon = this.currentSession ? 'üí¨' : '‚ö°';
    const modeText = this.currentSession ? 'ÂØπËØù‰∏≠' : 'Â¢ûÂº∫Ê®°Âºè';
    const rightSide = chalk.white(`${modeIcon} `) + chalk.gray(modeText);

    const padding = width - (leftSide.length + centerSide.length + rightSide.length + 6);
    const middlePadding = ' '.repeat(Math.max(0, Math.floor(padding / 2)));

    return separator + '\n' +
           leftSide + middlePadding + centerSide + middlePadding + rightSide + '\n';
  }

  private getStatusIcon(status: string): string {
    const icons = {
      ready: '‚úÖ',
      running: '‚è≥',
      error: '‚ùå',
      disabled: '‚≠ï'
    };
    return icons[status as keyof typeof icons] || '‚≠ï';
  }

  private getStatusColor(status: string): string {
    const colors = {
      ready: 'green',
      running: 'yellow',
      error: 'red',
      disabled: 'gray'
    };
    return colors[status as keyof typeof colors] || 'gray';
  }

  private formatDuration(startTime: Date): string {
    const duration = Date.now() - startTime.getTime();
    const minutes = Math.floor(duration / 60000);
    const seconds = Math.floor((duration % 60000) / 1000);

    if (minutes > 0) {
      return `${minutes}ÂàÜ${seconds}Áßí`;
    }
    return `${seconds}Áßí`;
  }

  private formatFileSize(bytes: number): string {
    if (bytes < 1024) return `${bytes} B`;
    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;
    return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;
  }

  private clearScreen(): void {
    process.stdout.write('\x1b[2J\x1b[H');
  }

  private clearMessageHistory(): void {
    this.messageHistory = [];
  }

  private renderDebounced(delay: number = 200): void {
    // ÂèñÊ∂à‰πãÂâçÁöÑÊ∏≤ÊüìÂÆöÊó∂Âô®
    if (this.renderTimeout) {
      clearTimeout(this.renderTimeout);
    }

    // ËÆæÁΩÆÊñ∞ÁöÑÊ∏≤ÊüìÂÆöÊó∂Âô®
    this.renderTimeout = setTimeout(() => {
      if (this.isRunning) {
        this.render();
      }
      this.renderTimeout = null;
    }, delay);
  }

  public render(): void {
    if (!this.isRunning) {
      return;
    }

    // Èò≤ÊäñÊú∫Âà∂ÔºöÈÅøÂÖçÈ¢ëÁπÅÊ∏≤Êüì
    const now = Date.now();
    if (now - this.lastRenderTime < 100) { // 100msÂÜÖÁöÑÈáçÂ§çÊ∏≤ÊüìËØ∑Ê±ÇË¢´ÂøΩÁï•
      return;
    }
    this.lastRenderTime = now;

    // Ê∏ÖÂ±è
    this.clearScreen();

    // ÊûÑÂª∫ÂÆåÊï¥ÁöÑËæìÂá∫ÂÜÖÂÆπ
    let output = '';

    // Ê∑ªÂä†Â§¥ÈÉ®
    output += this.renderHeader();

    // ËÆ°ÁÆóÂ∏ÉÂ±Ä
    const totalWidth = process.stdout.columns;
    const sidebarWidth = this.options.showSidebar ? Math.min(35, Math.floor(totalWidth * 0.35)) : 0;

    // Ê∑ªÂä†‰∏ªË¶ÅÂÜÖÂÆπÂå∫Âüü
    const mainContent = this.renderMainContent();

    if (this.options.showSidebar) {
      // ‰æßËæπÊ†èÂ∏ÉÂ±Ä
      const sidebar = this.renderSidebar();
      const sidebarLines = sidebar.split('\n');
      const mainLines = mainContent.split('\n');
      const maxLines = Math.max(sidebarLines.length, mainLines.length);

      for (let i = 0; i < maxLines; i++) {
        const sidebarLine = sidebarLines[i] || '';
        const mainLine = mainLines[i] || '';

        if (sidebarLine.trim()) {
          output += sidebarLine + '   ' + mainLine + '\n';
        } else if (mainLine.trim()) {
          output += ' '.repeat(sidebarWidth) + '   ' + mainLine + '\n';
        } else {
          output += '\n';
        }
      }
    } else {
      // ÂÖ®ÂÆΩÂ∏ÉÂ±Ä
      output += mainContent;
    }

    // Ê∑ªÂä†Áä∂ÊÄÅÊ†è
    output += this.renderStatusBar();

    // ‰∏ÄÊ¨°ÊÄßËæìÂá∫ÊâÄÊúâÂÜÖÂÆπÔºà‰∏ç‰ΩøÁî®console.logÈÅøÂÖçÂπ≤Êâ∞readlineÔºâ
    if (output) {
      process.stdout.write(output);
    }

    // ÈáçÊñ∞ËÆæÁΩÆÊèêÁ§∫Á¨¶Âπ∂ÊòæÁ§∫
    this.renderPrompt();
    // Á°Æ‰øùÊèêÁ§∫Á¨¶ÊòæÁ§∫
    if (this.rl && this.isRunning) {
      this.rl.prompt();
    }
  }

  private renderMainContent(): string {
    // ‰∏ªË¶ÅÂÜÖÂÆπÂå∫Âüü
    let content = '';

    // Ê¨¢Ëøé‰ø°ÊÅØ
    content += chalk.cyan('‚ï≠‚îÄ Ê¨¢Ëøé‰ΩøÁî®Â¢ûÂº∫Áâà AICLI ‚îÄ' + '‚îÄ'.repeat(Math.max(0, process.stdout.columns - 50)) + '‚ïÆ') + '\n';
    content += chalk.cyan('‚îÇ') + ' '.repeat(process.stdout.columns - 2) + chalk.cyan('‚îÇ') + '\n';

    const welcomeText = 'ü§ñ AIÁºñÁ®ãÂä©ÊâãÂ∑≤Â∞±Áª™ - ÂºÄÂßãËæìÂÖ•ÊÇ®ÁöÑÊ∂àÊÅØ';
    const welcomePadding = Math.floor((process.stdout.columns - welcomeText.length - 4) / 2);
    content += chalk.cyan('‚îÇ') + ' '.repeat(welcomePadding) + chalk.white.bold(welcomeText) + ' '.repeat(process.stdout.columns - welcomePadding - welcomeText.length - 4) + chalk.cyan('‚îÇ') + '\n';

    content += chalk.cyan('‚îÇ') + ' '.repeat(process.stdout.columns - 2) + chalk.cyan('‚îÇ') + '\n';
    content += chalk.cyan('‚ï∞' + '‚îÄ'.repeat(process.stdout.columns - 2) + '‚ïØ') + '\n\n';

    // ÊòæÁ§∫Ê∂àÊÅØÂéÜÂè≤
    if (this.messageHistory.length > 0) {
      content += chalk.yellow.bold('üí¨ ÂØπËØùÂéÜÂè≤:') + '\n';
      content += chalk.cyan('‚îÄ'.repeat(process.stdout.columns - 20)) + '\n\n';

      // Âè™ÊòæÁ§∫ÊúÄËøëÁöÑÂá†Êù°Ê∂àÊÅØÔºåÈÅøÂÖçÁïåÈù¢ËøáÈïø
      const recentMessages = this.messageHistory.slice(-10);

      for (const msg of recentMessages) {
        const timeStr = msg.timestamp.toLocaleTimeString('zh-CN', {
          hour12: false,
          hour: '2-digit',
          minute: '2-digit'
        });

        if (msg.type === 'user') {
          content += chalk.green(`üë§ [${timeStr}] `) + chalk.white(msg.content) + '\n';
        } else {
          content += chalk.blue(`ü§ñ [${timeStr}] `) + chalk.gray(msg.content) + '\n';
        }
        content += '\n';
      }
    } else {
      // Âø´ÈÄüÂëΩ‰ª§ÊèêÁ§∫
      content += chalk.yellow.bold('üí° Âø´ÈÄüÂëΩ‰ª§:') + '\n';
      content += chalk.white('  ‚Ä¢ ') + chalk.cyan('/help     ') + chalk.gray('- ÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØ') + '\n';
      content += chalk.white('  ‚Ä¢ ') + chalk.cyan('/paste    ') + chalk.gray('- Á≤òË¥¥Ââ™Ë¥¥ÊùøÂÜÖÂÆπÔºàÊîØÊåÅÊà™ÂõæÔºâ') + '\n';
    content += chalk.white('  ‚Ä¢ ') + chalk.cyan('/status   ') + chalk.gray('- Êü•ÁúãÁ≥ªÁªüÁä∂ÊÄÅ') + '\n';
      content += chalk.white('  ‚Ä¢ ') + chalk.cyan('/tools    ') + chalk.gray('- Êü•ÁúãÂ∑•ÂÖ∑ÂàóË°®') + '\n';
      content += chalk.white('  ‚Ä¢ ') + chalk.cyan('/clear    ') + chalk.gray('- Ê∏ÖÁ©∫Â±èÂπï') + '\n';
      content += chalk.white('  ‚Ä¢ ') + chalk.cyan('/exit     ') + chalk.gray('- ÈÄÄÂá∫Á®ãÂ∫è') + '\n\n';

      content += chalk.yellow.bold('üÜï Êñ∞ÂäüËÉΩ:') + '\n';
      content += chalk.white('  ‚Ä¢ ') + chalk.cyan('/paste    ') + chalk.gray('- Á≤òË¥¥Ââ™Ë¥¥ÊùøÂÜÖÂÆπÔºàÊîØÊåÅÊà™ÂõæÔºâ') + '\n';
      content += chalk.white('  ‚Ä¢ ') + chalk.cyan('""" Êàñ ``` ') + chalk.gray('- ËøõÂÖ•Â§öË°åËæìÂÖ•Ê®°Âºè') + '\n';
      content += chalk.white('  ‚Ä¢ ') + chalk.cyan('ÊãñÊãΩÊñá‰ª∂  ') + chalk.gray('- Ëá™Âä®Âä†ËΩΩÊñá‰ª∂ÂÜÖÂÆπ') + '\n\n';
    }

    // ÊèêÁ§∫‰ø°ÊÅØ
    content += chalk.gray('üí¨ Áõ¥Êé•ËæìÂÖ•Ê∂àÊÅØÂºÄÂßãÂØπËØùÔºåÊàñËæìÂÖ•ÂëΩ‰ª§Êü•ÁúãÊõ¥Â§öÈÄâÈ°π\n');

    return content;
  }

  private renderPrompt(): void {
    // Âä®ÊÄÅËæìÂÖ•ÊèêÁ§∫
    const timestamp = new Date().toLocaleTimeString('zh-CN', {
      hour12: false,
      hour: '2-digit',
      minute: '2-digit'
    });

    // Ê†πÊçÆÁä∂ÊÄÅÂèòÂåñÊèêÁ§∫Á¨¶Ê†∑Âºè
    let promptPrefix = '';
    if (this.currentSession) {
      const messageCount = this.currentSession.messages;
      if (messageCount > 10) {
        promptPrefix = 'üí≠ '; // Ê∑±Â∫¶ÂØπËØùÊ®°Âºè
      } else if (messageCount > 5) {
        promptPrefix = 'üó®Ô∏è  '; // ÂØπËØùÊ®°Âºè
      } else {
        promptPrefix = 'üë§ '; // ÂºÄÂßãÂØπËØùÊ®°Âºè
      }
    } else {
      promptPrefix = 'ü§ñ '; // ÂàùÂßãÊ®°Âºè
    }

    // Ê∑ªÂä†Âä®ÁîªÊïàÊûú
    if (this.options.enableAnimations) {
      const animationFrames = ['‚ö°', '‚≠ê', '‚ú®'];
      const frameIndex = Math.floor(Date.now() / 1000) % animationFrames.length;
      promptPrefix = animationFrames[frameIndex] + ' ';
    }

    const prompt = this.createGradient(`${promptPrefix}[${timestamp}] > `);
    this.rl.setPrompt(prompt);
  }

  public updateSession(session: SessionInfo): void {
    this.currentSession = session;
    if (this.isRunning) {
      this.render();
    }
  }

  public updateToolStatus(toolName: string, status: ToolStatus): void {
    this.toolStatuses.set(toolName, status);
    if (this.isRunning) {
      this.render();
    }
  }

  public showLoading(message: string = 'Â§ÑÁêÜ‰∏≠...'): void {
    this.spinner = ora({
      text: message,
      spinner: 'dots',
      color: 'cyan'
    }).start();
  }

  public hideLoading(): void {
    if (this.spinner) {
      this.spinner.stop();
      this.spinner = null;
      // ‰∏çÂú®ËøôÈáåË∞ÉÁî® renderÔºåËÆ©Ë∞ÉÁî®ËÄÖÊéßÂà∂Ê∏≤ÊüìÊó∂Êú∫
    }
  }

  public showMessage(message: string, type: 'info' | 'success' | 'warning' | 'error' = 'info', skipRerender: boolean = false): void {
    const colorMap = {
      info: chalk.blue,
      success: chalk.green,
      warning: chalk.yellow,
      error: chalk.red
    };

    // ‰ΩøÁî®process.stdout.writeÈÅøÂÖçÂπ≤Êâ∞readline
    process.stdout.write(colorMap[type](message) + '\n');

    if (this.isRunning && !skipRerender) {
      this.renderDebounced(300);
    }
  }

  private showInfo(message: string, skipRerender: boolean = false): void {
    this.showMessage(message, 'info', skipRerender);
  }

  private showSuccess(message: string, skipRerender: boolean = false): void {
    this.showMessage(message, 'success', skipRerender);
  }

  private showWarning(message: string, skipRerender: boolean = false): void {
    this.showMessage(message, 'warning', skipRerender);
  }

  private showError(message: string, skipRerender: boolean = false): void {
    this.showMessage(message, 'error', skipRerender);
  }

  public async start(): Promise<void> {
    this.isRunning = true;

    // ÊòæÁ§∫Ê¨¢Ëøé‰ø°ÊÅØ
    this.showWelcomeMessage();

    // ÂàùÂßãÂåñÂ∑•ÂÖ∑Áä∂ÊÄÅ
    this.initializeToolStatuses();

    // ÂêØÂä®‰∫§‰∫íÂºïÊìé
    this.interactionEngine.start();

    // ÂºÄÂßãÊ∏≤ÊüìÂæ™ÁéØ
    this.render();

    // ËÆæÁΩÆËæìÂÖ•Â§ÑÁêÜ
    this.setupInputHandler();
  }

  private showWelcomeMessage(): void {
    // ‰ΩøÁî®process.stdout.writeÈÅøÂÖçÂπ≤Êâ∞readline
    process.stdout.write(this.createGradient('üéâ Ê¨¢Ëøé‰ΩøÁî®Â¢ûÂº∫Áâà AICLI!') + '\n');
    process.stdout.write(chalk.gray('Âü∫‰∫é Claude Code CLI ËÆæËÆ°ÁêÜÂøµÁöÑÁé∞‰ª£Âåñ AI ÁºñÁ®ãÂä©Êâã') + '\n');
    process.stdout.write('\n');

    if (!process.env.DEEPSEEK_API_KEY && !process.env.OPENAI_API_KEY) {
      process.stdout.write(chalk.yellow('‚ö†Ô∏è  Êú™Ê£ÄÊµãÂà∞ API ÂØÜÈí•ÈÖçÁΩÆ') + '\n');
      process.stdout.write(chalk.gray('ËØ∑ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè‰ª•Ëé∑ÂæóÂÆåÊï¥ÂäüËÉΩ‰ΩìÈ™å:') + '\n');
      process.stdout.write(chalk.cyan('  export DEEPSEEK_API_KEY="your_api_key"') + '\n');
      process.stdout.write(chalk.cyan('  export OPENAI_API_KEY="your_api_key"') + '\n');
      process.stdout.write('\n');
    }

    // ÊòæÁ§∫Êñ∞ÂäüËÉΩÊèêÁ§∫
    process.stdout.write(chalk.cyan('üÜï Êñ∞ÂäüËÉΩ:') + '\n');
    process.stdout.write(chalk.white('  üìù Â§öË°åËæìÂÖ• - ËæìÂÖ• """ Êàñ ``` ËøõÂÖ•Â§öË°åÊ®°Âºè') + '\n');
    process.stdout.write(chalk.white('  üìÅ Êñá‰ª∂ÊãñÊãΩ - Áõ¥Êé•ÊãñÊãΩÊñá‰ª∂Âà∞ÁªàÁ´ØËá™Âä®Âä†ËΩΩÂÜÖÂÆπ') + '\n');
    process.stdout.write('\n');
  }

  private initializeToolStatuses(): void {
    const defaultTools: ToolStatus[] = [
      { name: 'web_search', category: 'Web', status: 'ready', description: 'WebÊêúÁ¥¢ÂäüËÉΩ' },
      { name: 'execute_code', category: 'Code', status: 'ready', description: '‰ª£Á†ÅÊâßË°å' },
      { name: 'analyze_file', category: 'File', status: 'ready', description: 'Êñá‰ª∂ÂàÜÊûê' },
      { name: 'process_image', category: 'Media', status: 'ready', description: 'ÂõæÂÉèÂ§ÑÁêÜ' },
      { name: 'project_operation', category: 'Project', status: 'ready', description: 'È°πÁõÆÁÆ°ÁêÜ' }
    ];

    defaultTools.forEach(tool => {
      this.toolStatuses.set(tool.name, tool);
    });
  }

  private setupInputHandler(): void {
    // ÂêØÁî®Êà™ÂõæÁ≤òË¥¥ÂäüËÉΩ
    if (this.options.enableScreenshotPaste && this.screenshotPasteHandler) {
      this.screenshotPasteHandler.enable(this.rl);

      // ÁõëÂê¨Á≤òË¥¥‰∫ã‰ª∂
      this.screenshotPasteHandler.on('paste', (event) => {
        console.log(chalk.dim(`\nüìã Â∑≤Â§ÑÁêÜÁ≤òË¥¥ÂÜÖÂÆπ: ${event.type}`));
      });

      // ÁõëÂê¨ÊñáÊú¨ÊèíÂÖ•‰∫ã‰ª∂
      this.screenshotPasteHandler.on('insert-text', (text: string) => {
        // Â∞ÜÁ≤òË¥¥ÁöÑÊñáÊú¨Ê∑ªÂä†Âà∞ËæìÂÖ•ÈòüÂàó
        this.pendingInputs.push(text);
      });
    }

    // ‰ΩøÁî®Â§öË°åËæìÂÖ•Â§ÑÁêÜÂô®Êõø‰ª£‰º†Áªüreadline
    this.rl.on('line', async (input) => {
      // ÊöÇÂÅúreadline‰ª•ÈÅøÂÖçÂÜ≤Á™Å
      this.rl.pause();

      try {
        // Ê£ÄÊü•ÊòØÂê¶ÊòØÂ§öË°åËæìÂÖ•ÂëΩ‰ª§
        const trimmed = input.trim();
        if (trimmed === '"""' || trimmed === '```' || trimmed === "'''" || trimmed === '/multiline') {
          // ÂêØÂä®Â§öË°åËæìÂÖ•Ê®°Âºè
          await this.startMultilineInput();
        } else {
          // Ê£ÄÊü•ÊòØÂê¶ÊòØ‰ø°ÊÅØÁ±ªÂëΩ‰ª§Ôºà‰∏çÈúÄË¶ÅÈáçÊñ∞Ê∏≤ÊüìÁïåÈù¢ÁöÑÂëΩ‰ª§Ôºâ
          const isInfoCommand = trimmed.startsWith('/') &&
            ['/help', '/status', '/tools', '/config', '/sessions', '/history'].some(cmd =>
              trimmed.startsWith(cmd) && (trimmed.length === cmd.length || trimmed[cmd.length] === ' ')
            );

          // Â∞ÜËæìÂÖ•‰º†ÈÄíÁªô InteractionEngine Â§ÑÁêÜ
          await this.interactionEngine.processInput(input);

          // Âè™ÊúâÈùû‰ø°ÊÅØÁ±ªÂëΩ‰ª§ÊâçÈúÄË¶ÅÈáçÊñ∞Ê∏≤ÊüìÁïåÈù¢
          if (!isInfoCommand) {
            this.renderDebounced(100); // ‰ΩøÁî®Áü≠Âª∂ËøüÁöÑÈò≤ÊäñÊ∏≤Êüì
          }
        }
      } catch (error) {
        process.stderr.write('ËæìÂÖ•Â§ÑÁêÜÈîôËØØ: ' + (error instanceof Error ? error.message : error) + '\n');
      } finally {
        // ÊÅ¢Â§çreadlineÁä∂ÊÄÅ
        setTimeout(() => {
          if (this.isRunning) {
            this.rl.resume();
            this.rl.prompt();
          }
        }, 100);
      }
    });
  }

  private restoreInputState(): void {
    this.safeRestorePrompt();
  }

  private safeRestorePrompt(): void {
    if (!this.isRunning || !this.rl) return;

    try {
      // Á°Æ‰øùreadlineÂ§Ñ‰∫éÊ¥ªÂä®Áä∂ÊÄÅ
      this.rl.resume();

      // Ê∏ÖÁêÜÂΩìÂâçË°åÂπ∂ÈáçÊñ∞ÊòæÁ§∫ÊèêÁ§∫Á¨¶
      process.stdout.write('\r\x1b[K');
      this.rl.prompt();
    } catch (error) {
      // Â¶ÇÊûúÂ§±Ë¥•ÔºåÂ∞ùËØïÊúÄÂü∫Êú¨ÁöÑÊñπÂºè
      try {
        const timestamp = new Date().toLocaleTimeString('zh-CN', {
          hour: '2-digit',
          minute: '2-digit'
        });
        process.stdout.write(`\n${chalk.green(`${timestamp}> `)}`);
      } catch (fallbackError) {
        // ÊúÄÂêéÁöÑÂ§áÁî®ÊñπÊ°à
        process.stdout.write('\n> ');
      }
    }
  }

  private async startMultilineInput(): Promise<void> {
    // ‰∏¥Êó∂ÂÖ≥Èó≠ÂΩìÂâçÁöÑreadline
    this.rl.pause();

    // ÂêØÂä®ÁºñËæëÂô®Ê®°Âºè
    const content = await this.multilineInput.startEditor();

    // ÁºñËæëÂô®ÂÆåÊàêÂêéÔºåÊÅ¢Â§çÂéüÂßãreadlineÂπ∂ÈáçÊñ∞Ê∏≤ÊüìÁïåÈù¢
    if (this.isRunning) {
      this.rl.resume();

      // Â§ÑÁêÜÁºñËæëÂô®ËøîÂõûÁöÑÂÜÖÂÆπ
      if (content.trim()) {
        await this.processUserInput(content);
      } else {
        // Â¶ÇÊûúÂèñÊ∂àÁºñËæëÔºåÈáçÊñ∞Ê∏≤ÊüìÁïåÈù¢
        this.render();
        this.rl.prompt();
      }
    }
  }

  private async handleDirectCommand(command: string): Promise<void> {
    await this.handleCommand(command);
  }

  private async processUserInput(content: string): Promise<void> {
    if (!content.trim()) return;

    // Ê£ÄÊü•ÊòØÂê¶ÊòØÂëΩ‰ª§
    if (content.trim().startsWith('/')) {
      const command = content.trim().substring(1);
      await this.handleCommand(command);
    } else {
      // Â§ÑÁêÜÁî®Êà∑Ê∂àÊÅØ
      await this.handleUserMessage(content);
    }
  }

  private async handleCommand(command: string): Promise<void> {
    const [cmd, ...args] = command.toLowerCase().split(' ');

    switch (cmd) {
      case 'help':
        this.showHelp();
        break;
      case 'exit':
        process.stdout.write('\n' + chalk.yellow('üëã ÂÜçËßÅÔºÅ') + '\n');
        this.stop();
        process.exit(0);
        return; // ÈÄÄÂá∫ÂëΩ‰ª§‰∏çÈúÄË¶ÅÈáçÊñ∞Ê∏≤Êüì
      case 'clear':
        this.clearMessageHistory();
        this.clearScreen();
        break;
      case 'status':
        this.showSystemStatus();
        break;
      case 'tools':
        this.showTools();
        break;
      case 'config':
        this.showConfig();
        break;
      case 'sessions':
        this.showSessions();
        break;
      case 'paste':
        await this.handlePasteCommand();
        break;
      case 'attachments':
      case 'att':
        this.showAttachments();
        break;
      case 'clear-attachments':
      case 'clear-att':
        await this.clearAttachments();
        break;
      case 'remove-attachment':
      case 'rm-att':
        if (args.length > 0) {
          await this.removeAttachment(args[0]);
        } else {
          this.showMessage('Áî®Ê≥ï: /remove-attachment <attachment_id>', 'warning');
        }
        break;
      case 'drag-files':
        await this.dragDropHandler.manualFileDetection();
        break;
      default:
        this.showMessage(`Êú™Áü•ÂëΩ‰ª§: /${command}„ÄÇËæìÂÖ• /help Êü•ÁúãÂ∏ÆÂä©„ÄÇ`, 'warning');
    }

    // ÂëΩ‰ª§Â§ÑÁêÜÂêéÈáçÊñ∞Ê∏≤ÊüìÔºàÈô§‰∫ÜexitÂëΩ‰ª§Ôºâ
    this.render();
  }

  
  private showHelp(): void {
    // ÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØÂêéÂª∂ËøüÈáçÊñ∞Ê∏≤Êüì
    const helpText = chalk.cyan('\nüìö ÂèØÁî®ÂëΩ‰ª§:') + '\n\n' +
                     chalk.white('  /help      ') + chalk.gray('- ÊòæÁ§∫Ê≠§Â∏ÆÂä©‰ø°ÊÅØ') + '\n' +
                     chalk.white('  /status    ') + chalk.gray('- ÊòæÁ§∫Á≥ªÁªüÁä∂ÊÄÅ') + '\n' +
                     chalk.white('  /tools     ') + chalk.gray('- ÊòæÁ§∫Â∑•ÂÖ∑ÂàóË°®') + '\n' +
                     chalk.white('  /config    ') + chalk.gray('- ÊòæÁ§∫ÈÖçÁΩÆ‰ø°ÊÅØ') + '\n' +
                     chalk.white('  /sessions  ') + chalk.gray('- ÊòæÁ§∫‰ºöËØùÂàóË°®') + '\n' +
                     chalk.white('  /clear     ') + chalk.gray('- Ê∏ÖÁ©∫Â±èÂπï') + '\n' +
                     chalk.white('  /exit      ') + chalk.gray('- ÈÄÄÂá∫Á®ãÂ∫è') + '\n\n' +

                     chalk.cyan('üÜï Â§öË°åËæìÂÖ•ÂäüËÉΩ:') + '\n' +
                     chalk.white('  """ Êàñ ``` ') + chalk.gray('- ËøõÂÖ•Â§öË°åËæìÂÖ•Ê®°Âºè') + '\n' +
                     chalk.white('  /multiline  ') + chalk.gray('- ËøõÂÖ•Â§öË°åËæìÂÖ•Ê®°Âºè') + '\n' +
                     chalk.white('  /submit     ') + chalk.gray('- Êèê‰∫§Â§öË°åËæìÂÖ• (Â§öË°åÊ®°Âºè‰∏ã)') + '\n' +
                     chalk.white('  /cancel     ') + chalk.gray('- ÂèñÊ∂àÂ§öË°åËæìÂÖ• (Â§öË°åÊ®°Âºè‰∏ã)') + '\n\n' +

                     chalk.cyan('üìÅ Êñá‰ª∂ÊãñÊãΩÂäüËÉΩ:') + '\n' +
                     chalk.white('  ÊãñÊãΩÊñá‰ª∂Âà∞ÁªàÁ´Ø ') + chalk.gray('- Ëá™Âä®Âä†ËΩΩÊñá‰ª∂ÂÜÖÂÆπ') + '\n' +
                     chalk.white('  ÊîØÊåÅÊñá‰ª∂Á±ªÂûã: ') + chalk.gray('.js, .ts, .json, .md, .txt Á≠â') + '\n' +
                     chalk.white('  Êñá‰ª∂Â§ßÂ∞èÈôêÂà∂: ') + chalk.gray('1MB') + '\n';

    // ‰ΩøÁî®process.stdout.writeËÄå‰∏çÊòØconsole.log
    process.stdout.write(helpText + '\n');

    // Âª∂ËøüÈáçÊñ∞Ê∏≤Êüì - ‰ΩøÁî®Èò≤ÊäñÊú∫Âà∂
    this.renderDebounced(1500);
  }

  private showSystemStatus(): void {
    const statusText = chalk.cyan('\nüîß Á≥ªÁªüÁä∂ÊÄÅ:') + '\n\n';

    let sessionInfo = '';
    if (this.currentSession) {
      sessionInfo += chalk.white('  üìù ÂΩìÂâç‰ºöËØù: ') + chalk.gray(this.currentSession.title || 'Êú™ÂëΩÂêç') + '\n';
      sessionInfo += chalk.white('  ü§ñ AIÊ®°Âûã: ') + chalk.gray(`${this.currentSession.provider}/${this.currentSession.model}`) + '\n';
      sessionInfo += chalk.white('  üí¨ Ê∂àÊÅØÊï∞: ') + chalk.gray(this.currentSession.messages) + '\n';
      sessionInfo += chalk.white('  ‚è±Ô∏è  ËøêË°åÊó∂Èó¥: ') + chalk.gray(this.formatDuration(this.currentSession.startTime)) + '\n';
    } else {
      sessionInfo += chalk.white('  üìù ÂΩìÂâç‰ºöËØù: ') + chalk.gray('Êó†') + '\n';
    }

    const readyTools = Array.from(this.toolStatuses.values()).filter(t => t.status === 'ready').length;
    const toolsInfo = chalk.white('  üõ†Ô∏è Â∑•ÂÖ∑Áä∂ÊÄÅ: ') + chalk.gray(`${this.toolStatuses.size} ‰∏™Â∑•ÂÖ∑Â∑≤Ê≥®ÂÜå`) + '\n' +
                     chalk.white('  ‚úÖ ÂèØÁî®Â∑•ÂÖ∑: ') + chalk.gray(`${readyTools} ‰∏™`);

    process.stdout.write(statusText + sessionInfo + toolsInfo + '\n');

    this.renderDebounced(1000);
  }

  private showTools(): void {
    let toolsText = chalk.cyan('\nüõ†Ô∏è ÂèØÁî®Â∑•ÂÖ∑:') + '\n\n';

    const categories = new Map<string, ToolStatus[]>();
    this.toolStatuses.forEach(tool => {
      if (!categories.has(tool.category)) {
        categories.set(tool.category, []);
      }
      categories.get(tool.category)!.push(tool);
    });

    categories.forEach((tools, category) => {
      toolsText += chalk.cyan(`  ${category}:`) + '\n';
      tools.forEach(tool => {
        const statusIcon = this.getStatusIcon(tool.status);
        toolsText += chalk.white(`    ${statusIcon} ${tool.name}`) +
                     chalk.gray(` [${tool.status}]`) + '\n';
      });
      toolsText += '\n';
    });

    process.stdout.write(toolsText);

    this.renderDebounced(1000);
  }

  private showConfig(): void {
    let configText = chalk.cyan('\n‚öôÔ∏è ÈÖçÁΩÆ‰ø°ÊÅØ:') + '\n\n';
    configText += chalk.white('  üé® ‰∏ªÈ¢ò: ') + chalk.gray(this.options.theme) + '\n';
    configText += chalk.white('  üìä ‰æßËæπÊ†è: ') + chalk.gray(this.options.showSidebar ? 'ÂêØÁî®' : 'Á¶ÅÁî®') + '\n';
    configText += chalk.white('  üìä Áä∂ÊÄÅÊ†è: ') + chalk.gray(this.options.showStatusBar ? 'ÂêØÁî®' : 'Á¶ÅÁî®') + '\n';
    configText += chalk.white('  ‚ú® Âä®Áîª: ') + chalk.gray(this.options.enableAnimations ? 'ÂêØÁî®' : 'Á¶ÅÁî®') + '\n';

    if (process.env.DEEPSEEK_API_KEY) {
      configText += chalk.white('  üîë DeepSeek: ') + chalk.green('Â∑≤ÈÖçÁΩÆ') + '\n';
    }
    if (process.env.OPENAI_API_KEY) {
      configText += chalk.white('  üîë OpenAI: ') + chalk.green('Â∑≤ÈÖçÁΩÆ') + '\n';
    }

    process.stdout.write(configText);

    this.renderDebounced(1000);
  }

  private showSessions(): void {
    let sessionsText = chalk.cyan('\nüíæ ‰ºöËØùÁÆ°ÁêÜ:') + '\n\n';

    if (this.currentSession) {
      sessionsText += chalk.cyan('  ÂΩìÂâç‰ºöËØù:') + '\n';
      sessionsText += chalk.white(`    üìù ${this.currentSession.title || 'Êú™ÂëΩÂêç‰ºöËØù'}`) + '\n';
      sessionsText += chalk.white(`    ü§ñ ${this.currentSession.provider}/${this.currentSession.model}`) + '\n';
      sessionsText += chalk.white(`    üí¨ ${this.currentSession.messages} Êù°Ê∂àÊÅØ`) + '\n';
      sessionsText += chalk.white(`    ‚è±Ô∏è  ${this.formatDuration(this.currentSession.startTime)}`) + '\n';
    } else {
      sessionsText += chalk.white('  üìù ÂΩìÂâç‰ºöËØù: Êó†') + '\n';
    }

    sessionsText += '\n' + chalk.gray('  ‰ºöËØùÁÆ°ÁêÜÂäüËÉΩÂºÄÂèë‰∏≠...') + '\n';

    process.stdout.write(sessionsText);

    this.renderDebounced(1000);
  }

  public stop(): void {
    try {
      this.isRunning = false;
      this.hideLoading();

      // Ê∏ÖÁêÜÊ∏≤ÊüìÂÆöÊó∂Âô®
      if (this.renderTimeout) {
        clearTimeout(this.renderTimeout);
        this.renderTimeout = null;
      }

      // Ê∏ÖÁêÜÂ¢ûÂº∫ÊãñÊãΩÁªÑ‰ª∂
      if (this.enhancedDragHandler) {
        try {
          this.enhancedDragHandler.cleanup();
        } catch (error) {
          // ÂøΩÁï•ÊãñÊãΩÂ§ÑÁêÜÂô®Ê∏ÖÁêÜÈîôËØØ
        }
      }

      if (this.inputEnhancer) {
        try {
          this.inputEnhancer.cleanup();
        } catch (error) {
          // ÂøΩÁï•ËæìÂÖ•Â¢ûÂº∫Âô®Ê∏ÖÁêÜÈîôËØØ
        }
      }

      if (this.dragIndicator) {
        try {
          this.dragIndicator.cleanup();
        } catch (error) {
          // ÂøΩÁï•ÊãñÊãΩÊåáÁ§∫Âô®Ê∏ÖÁêÜÈîôËØØ
        }
      }

      if (this.terminalDragDetector) {
        try {
          this.terminalDragDetector.cleanup();
        } catch (error) {
          // ÂøΩÁï•ÁªàÁ´ØÊãñÊãΩÊ£ÄÊµãÂô®Ê∏ÖÁêÜÈîôËØØ
        }
      }

      if (this.realDragDetector) {
        try {
          this.realDragDetector.disable();
        } catch (error) {
          // ÂøΩÁï•ÁúüÊ≠£ÊãñÊãΩÊ£ÄÊµãÂô®Ê∏ÖÁêÜÈîôËØØ
        }
      }

      // ÂÅúÊ≠¢Â§öË°åËæìÂÖ•Â§ÑÁêÜÂô®
      if (this.multilineInput) {
        try {
          this.multilineInput.stop();
        } catch (error) {
          // ÂøΩÁï•Â§öË°åËæìÂÖ•Â§ÑÁêÜÂô®ÂÅúÊ≠¢ÈîôËØØ
        }
      }

      // ÂÆâÂÖ®ÁßªÈô§Á™óÂè£Â§ßÂ∞èÂèòÂåñÁõëÂê¨Âô®
      try {
        process.stdout.removeAllListeners('resize');
      } catch (error) {
        // ÂøΩÁï•ÁõëÂê¨Âô®ÁßªÈô§ÈîôËØØ
      }

      // ÂÆâÂÖ®ÂÖ≥Èó≠readline
      if (this.rl) {
        try {
          this.rl.close();
        } catch (error) {
          // ÂøΩÁï•readlineÂÖ≥Èó≠ÈîôËØØ
        }
      }
    } catch (error) {
      // ÂøΩÁï•ÊâÄÊúâÂÅúÊ≠¢ÈîôËØØ
    }
  }

  private async showFormattedOutput(content: string, type: 'text' | 'markdown' | 'code' | 'error' | 'success' | 'warning' = 'text'): Promise<void> {
    const output: FormattedOutput = {
      content,
      type,
      metadata: {
        timestamp: new Date(),
        session: this.currentSession
      }
    };

    await this.outputProcessor.process(output);
  }

  public getAvailableTools(): any[] {
    return this.toolIntegration.getAllTools();
  }

  public async executeTool(toolName: string, parameters: Record<string, any>, options: ToolExecutionOptions = {}): Promise<any> {
    return await this.toolIntegration.executeTool(toolName, parameters, options);
  }

  public getOutputProcessor(): OutputProcessor {
    return this.outputProcessor;
  }

  public getInteractionEngine(): InteractionEngine {
    return this.interactionEngine;
  }

  private async handlePasteCommand(): Promise<void> {
    if (!this.options.enableScreenshotPaste || !this.screenshotPasteHandler) {
      this.showMessage('Êà™ÂõæÁ≤òË¥¥ÂäüËÉΩÊú™ÂêØÁî®', 'error');
      return;
    }

    try {
      // ‰ΩøÁî®ÈôÑ‰ª∂ÁÆ°ÁêÜÂô®Â§ÑÁêÜÁ≤òË¥¥
      const newAttachments = await this.attachmentManager.addFromClipboard();

      if (newAttachments.length > 0) {
        // Ê∑ªÂä†Âà∞ÂΩìÂâçÈôÑ‰ª∂ÂàóË°®
        this.currentAttachments.push(...newAttachments);

        // ÊòæÁ§∫Á≤òË¥¥ÁªìÊûú
        console.log(chalk.green(`‚úÖ Â∑≤Ê∑ªÂä† ${newAttachments.length} ‰∏™ÈôÑ‰ª∂:`));
        newAttachments.forEach(attachment => {
          const icon = attachment.type === 'image' ? 'üñºÔ∏è' : 'üìÑ';
          console.log(`   ${icon} ${attachment.filename}`);
        });

        console.log(chalk.gray(`üí° ÂΩìÂâçÂÖ±Êúâ ${this.currentAttachments.length} ‰∏™ÈôÑ‰ª∂ÔºåËæìÂÖ• /attachments Êü•Áúã`));
      } else {
        console.log(chalk.yellow('‚ö†Ô∏è Ââ™Ë¥¥Êùø‰∏≠Ê≤°ÊúâÂèØËØÜÂà´ÁöÑÂÜÖÂÆπ'));
      }
    } catch (error) {
      this.showMessage(`Á≤òË¥¥Â§±Ë¥•: ${error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'}`, 'error');
    }
  }

  private showAttachments(): void {
    const stats = this.attachmentManager.getStats();

    if (stats.count === 0) {
      this.showMessage('üìé ÊöÇÊó†ÈôÑ‰ª∂', 'info');
      return;
    }

    console.log(chalk.cyan(`\nüìé ÈôÑ‰ª∂ÂàóË°® (${stats.count})`));
    console.log(chalk.gray('‚îÄ'.repeat(60)));

    const attachments = this.attachmentManager.getAllAttachments();
    attachments.forEach((attachment, index) => {
      const icon = attachment.type === 'image' ? 'üñºÔ∏è' : 'üìÑ';
      const sourceIcon = this.getSourceIcon(attachment.source.type);
      const size = attachment.size ? this.formatFileSize(attachment.size) : 'Êú™Áü•Â§ßÂ∞è';

      console.log(`${index + 1}. ${icon} ${chalk.white(attachment.filename)} ${sourceIcon}`);
      console.log(`   Â§ßÂ∞è: ${chalk.gray(size)} | ID: ${chalk.gray(attachment.id)}`);

      if (attachment.source.originalPath) {
        console.log(`   ÂéüË∑ØÂæÑ: ${chalk.gray(attachment.source.originalPath)}`);
      }

      console.log(`   Êù•Ê∫ê: ${chalk.gray(this.getSourceDescription(attachment.source))}`);
      console.log('');
    });

    console.log(chalk.gray('‚îÄ'.repeat(60)));
    console.log(chalk.cyan(`ÊÄªËÆ°: ${stats.count} ‰∏™Êñá‰ª∂ (${this.formatFileSize(stats.totalSize)})`));
    console.log(chalk.gray(`üìÑ Êñá‰ª∂: ${stats.fileCount} | üñºÔ∏è ÂõæÁâá: ${stats.imageCount} | üóÇÔ∏è ‰∏¥Êó∂Êñá‰ª∂: ${stats.tempFiles}`));

    console.log(chalk.gray('\nüí° ÈôÑ‰ª∂ÁÆ°ÁêÜÂëΩ‰ª§:'));
    console.log(chalk.gray('‚Ä¢ /remove-attachment <id> - Âà†Èô§ÊåáÂÆöÈôÑ‰ª∂'));
    console.log(chalk.gray('‚Ä¢ /clear-attachments - Ê∏ÖÁ©∫ÊâÄÊúâÈôÑ‰ª∂'));
    console.log(chalk.gray('‚Ä¢ /paste - Á≤òË¥¥Ââ™Ë¥¥ÊùøÂÜÖÂÆπ'));
    console.log(chalk.gray('‚Ä¢ /drag-files - ÊâãÂä®Ê£ÄÊµãÊãñÊãΩÊñá‰ª∂'));
  }

  private async clearAttachments(): Promise<void> {
    const stats = this.attachmentManager.getStats();

    if (stats.count === 0) {
      this.showMessage('üìé ÊöÇÊó†ÈôÑ‰ª∂ÈúÄË¶ÅÊ∏ÖÁêÜ', 'info');
      return;
    }

    // ÁÆÄÂçïÁ°ÆËÆ§
    console.log(chalk.yellow(`\n‚ö†Ô∏è Á°ÆÂÆöË¶ÅÊ∏ÖÁ©∫ÊâÄÊúâ ${stats.count} ‰∏™ÈôÑ‰ª∂ÂêóÔºü`));
    console.log(chalk.gray('ËæìÂÖ• y Á°ÆËÆ§ÔºåÂÖ∂‰ªñ‰ªªÊÑèÈîÆÂèñÊ∂à'));

    // Âú®ÂÆûÈôÖÂÆûÁé∞‰∏≠ÔºåËøôÈáåÂ∫îËØ•Á≠âÂæÖÁî®Êà∑ËæìÂÖ•
    // ‰∏∫‰∫ÜÁÆÄÂåñÔºåÊàë‰ª¨Áõ¥Êé•Ê∏ÖÁ©∫
    this.attachmentManager.clearAttachments();
    this.currentAttachments = [];

    this.showMessage(`‚úÖ Â∑≤Ê∏ÖÁ©∫ÊâÄÊúâÈôÑ‰ª∂`, 'success');
  }

  private async removeAttachment(attachmentId: string): Promise<void> {
    const attachment = this.attachmentManager.getAttachment(attachmentId);

    if (!attachment) {
      this.showMessage(`‚ùå Êú™ÊâæÂà∞ÈôÑ‰ª∂: ${attachmentId}`, 'error');
      return;
    }

    const success = this.attachmentManager.removeAttachment(attachmentId);

    if (success) {
      // ‰ªéÂΩìÂâçÈôÑ‰ª∂ÂàóË°®‰∏≠ÁßªÈô§
      this.currentAttachments = this.currentAttachments.filter(att => att.id !== attachmentId);
      this.showMessage(`‚úÖ Â∑≤Âà†Èô§ÈôÑ‰ª∂: ${attachment.filename}`, 'success');
    } else {
      this.showMessage(`‚ùå Âà†Èô§ÈôÑ‰ª∂Â§±Ë¥•: ${attachment.filename}`, 'error');
    }
  }

  private async handleUserMessage(content: string): Promise<void> {
    if (!this.aiService) {
      this.showMessage('AI ÊúçÂä°Êú™ÂàùÂßãÂåñ', 'error');
      return;
    }

    // Ê∑ªÂä†Áî®Êà∑Ê∂àÊÅØÂà∞ÂéÜÂè≤
    this.messageHistory.push({
      type: 'user',
      content: content,
      timestamp: new Date()
    });

    // ÊòæÁ§∫Âä†ËΩΩÂä®Áîª
    this.spinner = ora({
      text: 'ü§î AI Ê≠£Âú®ÊÄùËÄÉ...',
      color: 'blue'
    }).start();

    try {
      // Â¶ÇÊûúÊúâÈôÑ‰ª∂Ôºå‰ΩøÁî®Â¢ûÂº∫ÁöÑ AI ÊúçÂä°
      if (this.currentAttachments.length > 0) {
        await this.sendMessageWithAttachments(content);
      } else {
        // ‰ΩøÁî®ÊôÆÈÄö AI ÊúçÂä°
        const messages: ChatMessage[] = [
          {
            role: 'user',
            content: content,
            timestamp: new Date()
          }
        ];
        const response = await this.aiService.sendMessage(messages);

        if (this.spinner) {
          this.spinner.stop();
          this.spinner = null;
        }

        this.messageHistory.push({
          type: 'ai',
          content: response.content,
          timestamp: new Date()
        });

        this.displayAIResponse(response.content);
      }
    } catch (error) {
      if (this.spinner) {
        this.spinner.stop();
        this.spinner = null;
      }

      this.showMessage(`AI ÂìçÂ∫îÂ§±Ë¥•: ${error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'}`, 'error');
    }
  }

  private async sendMessageWithAttachments(content: string): Promise<void> {
    if (!this.aiService) {
      this.showMessage('AI ÊúçÂä°Êú™ÂàùÂßãÂåñ', 'error');
      return;
    }

    try {
      // ÂàõÂª∫Â¢ûÂº∫ AI ÊúçÂä°ÂÆû‰æã
      const enhancedService = new (await import('../services/enhanced-ai-service')).EnhancedAIService({
        name: 'claude',
        apiKey: process.env.ANTHROPIC_API_KEY || '',
        baseUrl: 'https://api.anthropic.com',
        model: 'claude-3-sonnet-20240229'
      });

      // ÊûÑÂª∫Ê∂àÊÅØ
      const messages = [
        {
          role: 'user' as const,
          content: content,
          timestamp: new Date(),
          attachments: this.currentAttachments
        }
      ];

      const request: EnhancedAIRequest = {
        messages,
        attachments: this.currentAttachments.map(att => ({
          type: att.type,
          filename: att.filename,
          content: att.content,
          mimeType: att.mimeType,
          size: att.size,
          tempPath: att.tempPath
        })),
        model: 'claude-3-sonnet-20240229',
        stream: true,
        temperature: 0.7,
        maxTokens: 4000
      };

      if (this.spinner) {
        this.spinner.text = 'ü§ñ AI Ê≠£Âú®Â§ÑÁêÜÈôÑ‰ª∂...';
      }

      let fullResponse = '';

      const response = await enhancedService.sendStreamMessage(request, (chunk: string) => {
        fullResponse += chunk;
        // ÂÆûÊó∂ÊòæÁ§∫ÂìçÂ∫îÂÜÖÂÆπ
        process.stdout.write(chunk);
      });

      if (this.spinner) {
        this.spinner.stop();
        this.spinner = null;
      }

      // Ê∑ªÂä†Êç¢Ë°åÁ¨¶Á°Æ‰øùÊ†ºÂºèÊ≠£Á°Æ
      if (fullResponse && !fullResponse.endsWith('\n')) {
        process.stdout.write('\n');
      }

      this.messageHistory.push({
        type: 'ai',
        content: fullResponse,
        timestamp: new Date()
      });

    } catch (error) {
      if (this.spinner) {
        this.spinner.stop();
        this.spinner = null;
      }

      this.showMessage(`Â§ÑÁêÜÈôÑ‰ª∂Ê∂àÊÅØÂ§±Ë¥•: ${error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'}`, 'error');
    }
  }

  private getSourceIcon(sourceType: string): string {
    const icons = {
      'paste': 'üìã',
      'drag': 'üéØ',
      'upload': '‚¨ÜÔ∏è',
      'file': 'üìÅ'
    };
    return icons[sourceType as keyof typeof icons] || 'üìé';
  }

  private getSourceDescription(source: any): string {
    const descriptions = {
      'paste': 'Ââ™Ë¥¥ÊùøÁ≤òË¥¥',
      'drag': 'ÊãñÊãΩÊ∑ªÂä†',
      'upload': 'Êñá‰ª∂‰∏ä‰º†',
      'file': 'Êñá‰ª∂Ë∑ØÂæÑ'
    };
    return descriptions[source.type as keyof typeof descriptions] || 'Êú™Áü•Êù•Ê∫ê';
  }

  
  private setupDragDropHandlers(): void {
    // ÁõëÂê¨ÊãñÊãΩ‰∫ã‰ª∂
    this.dragDropHandler.on('drag-enter', (event: any) => {
      console.log(chalk.cyan('üéØ Ê£ÄÊµãÂà∞Êñá‰ª∂ÊãñÊãΩ...'));
    });

    this.dragDropHandler.on('drag-leave', (event: any) => {
      console.log(chalk.gray('üì¥ Êñá‰ª∂ÊãñÊãΩÂ∑≤ÂèñÊ∂à'));
    });

    this.dragDropHandler.on('drop', async (event: any) => {
      if (event.files && event.files.length > 0) {
        console.log(chalk.cyan(`üì• Â§ÑÁêÜÊãñÊãΩÁöÑ ${event.files.length} ‰∏™Êñá‰ª∂...`));

        // Ê∑ªÂä†Âà∞ÈôÑ‰ª∂ÁÆ°ÁêÜÂô®
        const newAttachments = await this.attachmentManager.addFromDragDrop(event.files);

        if (newAttachments.length > 0) {
          // Ê∑ªÂä†Âà∞ÂΩìÂâçÈôÑ‰ª∂ÂàóË°®
          this.currentAttachments.push(...newAttachments);

          console.log(chalk.green(`‚úÖ Â∑≤Ê∑ªÂä† ${newAttachments.length} ‰∏™ÈôÑ‰ª∂:`));
          newAttachments.forEach(attachment => {
            const icon = attachment.type === 'image' ? 'üñºÔ∏è' : 'üìÑ';
            console.log(`   ${icon} ${attachment.filename}`);
          });

          console.log(chalk.gray(`üí° ÂΩìÂâçÂÖ±Êúâ ${this.currentAttachments.length} ‰∏™ÈôÑ‰ª∂ÔºåËæìÂÖ• /attachments Êü•Áúã`));
        }
      }
    });

    // ÂêØÁî®ÊãñÊãΩÂäüËÉΩ
    this.dragDropHandler.enable();
  }

  private setupEnhancedDragHandlers(): void {
    // ÁÆÄÂåñÂ¢ûÂº∫ÊãñÊãΩÂ§ÑÁêÜÔºåÈÅøÂÖç‰∏éreadlineÂÜ≤Á™Å
    // ‰∏ªË¶Å‰æùËµñÁé∞ÊúâÁöÑÊãñÊãΩÂ§ÑÁêÜÂô®ÔºåÂ¢ûÂº∫ÊãñÊãΩÂ§ÑÁêÜÂô®Âè™Êèê‰æõËæÖÂä©ÂäüËÉΩ

    this.enhancedDragHandler.on('filesProcessed', (event) => {
      // Êõ¥Êñ∞ÂΩìÂâçÈôÑ‰ª∂ÂàóË°®
      this.currentAttachments = this.attachmentManager.getAllAttachments();

      // Êõ¥Êñ∞ËæìÂÖ•Â¢ûÂº∫Âô®ÁöÑÈôÑ‰ª∂Áä∂ÊÄÅ
      this.inputEnhancer.clearAttachments();
      this.currentAttachments.forEach(att => {
        this.inputEnhancer.addAttachment(att);
      });

      // ÊòæÁ§∫Â§ÑÁêÜÁªìÊûú
      const { successCount, failCount, totalCount } = event;
      if (successCount > 0) {
        console.log(chalk.green(`‚úÖ ÈÄöËøáÂ¢ûÂº∫ÊãñÊãΩÊ∑ªÂä†‰∫Ü ${successCount} ‰∏™Êñá‰ª∂`));
        if (failCount > 0) {
          console.log(chalk.yellow(`‚ö†Ô∏è ${failCount} ‰∏™Êñá‰ª∂Â§ÑÁêÜÂ§±Ë¥•`));
        }
      }
    });

    // ËÆæÁΩÆËæìÂÖ•Â¢ûÂº∫Âô®‰∫ã‰ª∂Â§ÑÁêÜÔºàÁÆÄÂåñÔºâ
    this.inputEnhancer.on('filesProcessed', (event) => {
      // ÂêåÊ≠•ÈôÑ‰ª∂Áä∂ÊÄÅ
      this.currentAttachments = this.inputEnhancer.getAttachments();
    });

    // ÂêØÁî®Â¢ûÂº∫ÊãñÊãΩÂäüËÉΩÔºàË¢´Âä®Ê®°ÂºèÔºâ
    this.enhancedDragHandler.enable();

    console.log(chalk.green('‚úÖ Â¢ûÂº∫ÊãñÊãΩÂäüËÉΩÂ∑≤ÂêØÁî®ÔºàË¢´Âä®Ê®°ÂºèÔºâ'));
    console.log(chalk.cyan('üí° ÊèêÁ§∫: ÊãñÊãΩÂäüËÉΩÂ∑≤‰ºòÂåñÔºåÁ°Æ‰øùÁïåÈù¢ÂìçÂ∫îÊµÅÁïÖ'));
  }

  private setupTerminalDragDetector(): void {
    // Âª∂ËøüÂêØÁî®ÔºåÁ°Æ‰øùÁïåÈù¢ÂÆåÂÖ®Ê∏≤ÊüìÂêéÂÜçÂêØÁî®ÊãñÊãΩÊ£ÄÊµã
    setTimeout(() => {
      // ËÆæÁΩÆÁªàÁ´ØÊãñÊãΩÊ£ÄÊµãÂô®‰∫ã‰ª∂Â§ÑÁêÜ
      this.terminalDragDetector.on('drag-start', (event: TerminalDragEvent) => {
        // Á°Æ‰øùÂú®ÂΩìÂâçË°å‰∏ãÊñπÊòæÁ§∫Ôºå‰∏çÂπ≤Êâ∞ËæìÂÖ•
        process.stdout.write('\n');
        console.log(this.dragDisplay.renderDragStart(event.files));
        this.redrawPrompt();
      });

      this.terminalDragDetector.on('drag-progress', (event: TerminalDragEvent) => {
        const currentFile = event.files[0]?.fileName;
        const total = event.files.length;
        const current = event.files.filter(f => f.isProcessed).length;

        process.stdout.write('\n');
        console.log(this.dragDisplay.renderDragProgress(current, total, currentFile));
        this.redrawPrompt();
      });

      this.terminalDragDetector.on('drag-complete', (event: TerminalDragEvent) => {
        process.stdout.write('\n');
        console.log(this.dragDisplay.renderDragComplete(event.files));

        // Êõ¥Êñ∞ÂΩìÂâçÈôÑ‰ª∂ÂàóË°®
        this.currentAttachments = this.attachmentManager.getAllAttachments();

        // Êõ¥Êñ∞ËæìÂÖ•Â¢ûÂº∫Âô®ÁöÑÈôÑ‰ª∂Áä∂ÊÄÅ
        this.inputEnhancer.clearAttachments();
        this.currentAttachments.forEach(att => {
          this.inputEnhancer.addAttachment(att);
        });

        // Êõ¥Êñ∞ÊèêÁ§∫
        this.inputEnhancer.updatePrompt();
        this.redrawPrompt();
      });

      this.terminalDragDetector.on('drag-error', (event: TerminalDragEvent) => {
        process.stdout.write('\n');
        console.log(chalk.red(`‚ùå ÊãñÊãΩÂ§ÑÁêÜÂá∫Èîô: ${event.message}`));
        this.redrawPrompt();
      });

      // ÂêØÁî®ÁªàÁ´ØÊãñÊãΩÊ£ÄÊµã
      this.terminalDragDetector.enable();

      // ÊòæÁ§∫ÂêØÁî®‰ø°ÊÅØ
      setTimeout(() => {
        process.stdout.write('\n');
        console.log(chalk.green('‚úÖ ÁªàÁ´ØÊãñÊãΩÊ£ÄÊµãÂ∑≤ÂêØÁî®'));
        console.log(chalk.cyan('üí° Áé∞Âú®ÊîØÊåÅÊãñÊãΩÊñá‰ª∂ÂíåÂõæÁâáÂà∞ÁªàÁ´Ø'));
        console.log(chalk.gray('   üìã ÊãñÊãΩÂêéÂ∞ÜÂú®‰∏ãÊñπÊòæÁ§∫Êñá‰ª∂È¢ÑËßà'));
        this.redrawPrompt();
      }, 100);
    }, 2000); // 2ÁßíÂêéÂêØÁî®ÔºåÁ°Æ‰øùÁïåÈù¢ÂÆåÂÖ®Ê∏≤Êüì
  }

  private setupRealDragDetector(): void {
    // ËÆæÁΩÆÁúüÊ≠£ÊãñÊãΩÊ£ÄÊµãÂô®ÁöÑ‰∫ã‰ª∂Â§ÑÁêÜ
    this.realDragDetector.on('drag-enter', (event: RealDragEvent) => {
      process.stdout.write('\n');
      console.log(chalk.cyan('üéØ Ê£ÄÊµãÂà∞ÊãñÊãΩËøõÂÖ•ËæìÂÖ•Ê°ÜÂå∫Âüü'));
      this.redrawPrompt();
    });

    this.realDragDetector.on('drag-over', (event: RealDragEvent) => {
      if (event.position) {
        // ÂèØ‰ª•Âú®ÊéßÂà∂Âè∞ÊòæÁ§∫ÊãñÊãΩ‰ΩçÁΩÆ‰ø°ÊÅØ
        // process.stdout.write(`\x1b[0HÊãñÊãΩ‰ΩçÁΩÆ: ${event.position.x}, ${event.position.y}`);
      }
    });

    this.realDragDetector.on('drag-leave', (event: RealDragEvent) => {
      process.stdout.write('\n');
      console.log(chalk.gray('üì§ ÊãñÊãΩÂ∑≤ÂèñÊ∂à'));
      this.redrawPrompt();
    });

    this.realDragDetector.on('drop', (event: RealDragEvent) => {
      process.stdout.write('\n');
      console.log(this.dragDisplay.renderDragStart(event.files));
      this.redrawPrompt();
    });

    this.realDragDetector.on('drag-error', (event: RealDragEvent) => {
      process.stdout.write('\n');
      console.log(chalk.red(`‚ùå ÊãñÊãΩÈîôËØØ: ${event.message}`));
      this.redrawPrompt();
    });

    this.realDragDetector.on('attachments-updated', (event: any) => {
      process.stdout.write('\n');

      // Êõ¥Êñ∞ÂΩìÂâçÈôÑ‰ª∂ÂàóË°®
      this.currentAttachments = [...this.currentAttachments, ...event.attachments];

      // ÂêåÊ≠•Âà∞ËæìÂÖ•Â¢ûÂº∫Âô®
      if (this.inputEnhancer) {
        event.attachments.forEach((attachment: ManagedAttachment) => {
          this.inputEnhancer.addAttachment(attachment);
        });
      }

      console.log(chalk.green(`‚úÖ ${event.message}`));
      console.log(chalk.cyan(`üìé ÂΩìÂâçÈôÑ‰ª∂ÊÄªÊï∞: ${this.currentAttachments.length}`));

      // ÊòæÁ§∫ÈôÑ‰ª∂‰ø°ÊÅØ
      event.attachments.forEach((attachment: ManagedAttachment, index: number) => {
        const icon = this.getFileIcon(attachment.type);
        console.log(chalk.gray(`   ${index + 1}. ${icon} ${attachment.filename} (${this.formatFileSize(attachment.size || 0)})`));
      });

      this.redrawPrompt();
    });

    // Âª∂ËøüÂêØÁî®ÁúüÊ≠£ÊãñÊãΩÊ£ÄÊµã
    setTimeout(() => {
      this.realDragDetector.enable();

      // ÊòæÁ§∫ÂêØÁî®‰ø°ÊÅØ
      setTimeout(() => {
        process.stdout.write('\n');
        console.log(chalk.green('üéØ Â¢ûÂº∫ÊãñÊãΩÊ£ÄÊµãÂ∑≤ÂêØÁî®'));
        console.log(chalk.cyan('üí° Áé∞Âú®ÊîØÊåÅÁõ¥Êé•ÊãñÊãΩÊñá‰ª∂Âà∞ËæìÂÖ•Ê°ÜÂå∫Âüü'));
        console.log(chalk.gray('   üìã ÊãñÊãΩÊó∂‰ºöÂú®ËæìÂÖ•Ê°ÜÈôÑËøëÊòæÁ§∫ËßÜËßâÂèçÈ¶à'));
        this.redrawPrompt();
      }, 100);
    }, 3000); // 3ÁßíÂêéÂêØÁî®ÔºåÂú®ÁªàÁ´ØÊãñÊãΩÊ£ÄÊµã‰πãÂêé
  }

  private getDefaultWatchDirectories(): string[] {
    const os = require('os');
    const path = require('path');

    return [
      os.tmpdir(),
      path.join(os.tmpdir(), 'aicli-drag-drop'),
      path.join(process.cwd(), 'temp'),
      path.join(process.cwd(), 'dropped-files'),
      path.join(os.homedir(), 'Downloads'),
      path.join(os.homedir(), 'Desktop')
    ];
  }

  private getFileIcon(type: string): string {
    const icons = {
      image: 'üñºÔ∏è',
      document: 'üìÑ',
      text: 'üìù',
      file: 'üìé',
      binary: 'üíæ'
    };
    return icons[type as keyof typeof icons] || 'üìé';
  }

  
  private redrawPrompt(): void {
    // ÈáçÊñ∞ÁªòÂà∂ÊèêÁ§∫Á¨¶
    if (this.rl && this.inputEnhancer) {
      try {
        process.stdout.write('\n');
        this.inputEnhancer.updatePrompt();
      } catch (error) {
        // ÂøΩÁï•ÈáçÁªòÈîôËØØ
      }
    }
  }

  private displayAIResponse(content: string): void {
    console.log('\n' + chalk.green('ü§ñ AI:'));
    console.log(content);
    console.log('');
  }
}